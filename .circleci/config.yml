version: 2.1

orbs:
  slack: circleci/slack@4.12.0
  aws-cli: circleci/aws-cli@3.1.4
  node: circleci/node@5.0.3

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            ID="$(echo << parameters.workflow_id >>)"
            aws s3 rm s3://udapeople-${ID} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS="$(curl --insecure https://kvdb.io/Lr5zpj7W7rui3EyzimQ6ni/migration_<< parameters.workflow_id >>)"
            echo $SUCCESS
            if [[ $SUCCESS != 1 ]]
            then
              cd ~/project/backend
              npm install --no-audit --no-fund
              npm run migrations:revert
            fi

  notify-slack:
    description: Notify slack.
    steps:
      - slack/notify:
          channel: monitoring_instances
          mentions: '@platform_support'
          event: fail
          template: basic_fail_1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install --no-audit --no-fund
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: monitoring_instances
          event: fail
          mentions: '@platform_support'
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install --no-audit --no-fund
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify-slack

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install --no-audit --no-fund
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify-slack

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install --no-audit --no-fund
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify-slack

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend audit
          command: |
            cd frontend
            npm install --no-audit --no-fund
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify-slack

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend audit
          command: |
            cd backend
            npm install --no-audit --no-fund
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - notify-slack

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP="$(.circleci/scripts/get_stack.sh udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7})"
            echo $BACKEND_IP
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
      - run:
          name: Install Tar and gzip
          command: |
            yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - notify-slack
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - aws-cli/setup
      - add_ssh_keys:
          fingerprints: ['f7:6b:56:a9:38:8a:0b:f5:0d:ca:f8:f1:51:81:79:a5']
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - notify-slack
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install --no-audit --no-fund
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/Lr5zpj7W7rui3EyzimQ6ni/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - notify-slack
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Tar and gzip
          command: |
            yum -y install tar gzip curl
      - run:
          name: Get backend url
          command: |
            echo $BACKEND_IP
            BACKEND_IP="$(.circleci/scripts/get_stack.sh udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7})"
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - node/install:
          node-version: '13.8.0'
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install --no-audit --no-fund
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - notify-slack
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['f7:6b:56:a9:38:8a:0b:f5:0d:ca:f8:f1:51:81:79:a5']
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip curl nodejs npm
      - aws-cli/setup
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install --no-audit --no-fund
            npm run build
            cd ..
            # Zip the directory
            ls -la
            tar -czvf .circleci/ansible/roles/deploy/files/artifact.tar.gz backend
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - notify-slack
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - node/install:
          node-version: '13.8.0'
      - aws-cli/setup
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      - run:
          name: Get backend url
          command: |
            BACKEND_IP="$(.circleci/scripts/get_stack.sh udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7})"
            echo $BACKEND_IP
      - run:
          name: Backend smoke test.
          command: |
            # Fetch and prepare the BACKEND_IP env var
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - notify-slack
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  # - node/install:
  #     node-version: '13.8.0'
  # - aws-cli/setup
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     - notify-slack
  #     - revert-migrations
  #     - destroy_environment:
  #         frontend_stack_name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  #         backend_stack_name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  # cleanup:
  #   docker:
  #     # Docker image here
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Get old stack workflow id
  #         command: |
  #           # your code here
  #           export OldWorkflowID="the id here"
  #           export STACKS=[] #put the list of stacks here
  #     - run:
  #         name: Remove old stacks and files
  #         command: |
  #           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #           then
  #             # your code here
  #           fi

workflows:
  default:
    jobs:
      - build-frontend:
          context: Udacity
      - build-backend:
          context: Udacity
      - test-frontend:
          context: Udacity
          requires: [build-frontend]
      - test-backend:
          context: Udacity
          requires: [build-backend]
      - scan-backend:
          context: Udacity
          requires: [build-backend]
      - scan-frontend:
          context: Udacity
          requires: [build-frontend]
      - deploy-infrastructure:
          context: Udacity
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          context: Udacity
          requires: [deploy-infrastructure]
      - run-migrations:
          context: Udacity
          requires: [configure-infrastructure]
      - deploy-backend:
          context: Udacity
          requires: [run-migrations]
      - deploy-frontend:
          context: Udacity
          requires: [run-migrations, deploy-backend]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
