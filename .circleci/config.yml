version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.4

commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name ci-stack-${CIRCLE_WORKFLOW_ID:0:5}

jobs:
  install_packages:
    docker:
      - image: cimg/node:16.18 # https://circleci.com/developer/images/image/cimg/node#variants
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "yarn.lock" }}
            - v1-deps-
      - run:
          name: 'Install packages'
          command: |
            yarn install
      - save_cache:
          key: v1-deps-{{ checksum "yarn.lock" }}
          paths:
            - node_modules

  check_format:
    docker:
      - image: cimg/node:16.18
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "yarn.lock" }}
            - v1-deps-
      - run:
          name: 'Check format'
          command: |
            yarn format:check
      - save_cache:
          key: v1-deps-{{ checksum "yarn.lock" }}
          paths:
            - node_modules

  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file 03-auto-deploy-monitoring-logging/ci_cd/template.yml \
              --stack-name ci-stack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1
      - run:
          name: Check failure
          when: on_fail
          command: |
            aws cloudformation describe-stack-events --stack-name ci-stack-${CIRCLE_WORKFLOW_ID:0:5} --max-items 2

  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - aws-cli/setup
      - add_ssh_keys:
          fingerprints: ['f7:6b:56:a9:38:8a:0b:f5:0d:ca:f8:f1:51:81:79:a5']
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Add created public IP to inventory
          command: |
            PublicIp="$(scripts/get-stack.sh ci-stack-${CIRCLE_WORKFLOW_ID:0:5} EC2InstancePublicIp)"
            echo $PublicIp
            echo $PublicIp >> 03-auto-deploy-monitoring-logging/ci_cd/inventory
      - run:
          name: Run Playbook and Configure server
          command: |
            cd 03-auto-deploy-monitoring-logging/ci_cd
            ansible-playbook -i inventory main.yml
      - destroy_environment

  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - aws-cli/setup
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="$(scripts/get-stack.sh ci-stack-${CIRCLE_WORKFLOW_ID:0:5} EC2InstancePublicDnsName)"
            echo $URL
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
      - run:
          name: destroy environment
          command: |
            aws cloudformation delete-stack --stack-name ci-stack-${CIRCLE_WORKFLOW_ID:0:5}

  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack for S3 bucket
          command: |
            cd 03-auto-deploy-monitoring-logging/ci_cd
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name bolas3udabucket-stack \
            --parameter-overrides BolaS3BucketName="bola-bucket-${CIRCLE_WORKFLOW_ID:0:5}"
      - run:
          name: Create Cloudformation Stack for S3 bucket
          command: |
            cd 03-auto-deploy-monitoring-logging/ci_cd
            aws s3 sync webfiles/. s3://bola-bucket-${CIRCLE_WORKFLOW_ID:0:5} --delete

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            cd 03-auto-deploy-monitoring-logging/ci_cd
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides S3BucketId="bola-bucket-${CIRCLE_WORKFLOW_ID:0:5}"

  create_prometheus_instance:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Creat Prometheus Instance
          command: |
            cd 03-auto-deploy-monitoring-logging/monitoring_and_logging
            aws cloudformation deploy \
            --template-file template.yml \
            --stack-name prometheus-node-exporter

workflows:
  pr-workflow:
    jobs:
      - install_packages
      - check_format:
          requires:
            - install_packages
      - create_prometheus_instance
      - create_infrastructure:
          requires:
            - check_format
      - configure_infrastructure:
          requires:
            - create_infrastructure
      - create_and_deploy_front_end:
          requires:
            - check_format
      - promote_to_production:
          requires:
            - create_and_deploy_front_end
      - smoke_test:
          requires:
            - configure_infrastructure
            - promote_to_production
